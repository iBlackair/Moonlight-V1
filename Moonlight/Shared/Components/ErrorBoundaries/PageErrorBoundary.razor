@using Moonlight.App.Exceptions
@using Moonlight.App.Helpers
@using Moonlight.App.Services
@using Moonlight.App.Services.Interop
@using Moonlight.App.Services.Sessions

@inherits ErrorBoundary

@inject IdentityService IdentityService
@inject AlertService AlertService
@inject SmartTranslateService SmartTranslateService

@if (CurrentException is null)
{
    @ChildContent
}
else if (ErrorContent is not null)
{
    <div class="card card-flush h-md-100">
        <div class="card-body d-flex flex-column justify-content-between mt-9 bgi-no-repeat bgi-size-cover bgi-position-x-center pb-0">
            <div class="mb-10">
                <div class="fs-2hx fw-bold text-gray-800 text-center mb-13">
                    <span class="me-2">
                        <TL>Ooops. This page is crashed</TL>
                    </span>
                </div>
                <div class="text-center">
                    <TL>This page is crashed. The error has been reported to the moonlight team. Meanwhile you can try reloading the page</TL>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="card card-flush h-md-100">
        <div class="card-body d-flex flex-column justify-content-between mt-9 bgi-no-repeat bgi-size-cover bgi-position-x-center pb-0">
            <div class="mb-10">
                <div class="fs-2hx fw-bold text-gray-800 text-center mb-13">
                    <span class="me-2">
                        <TL>Ooops. This page is crashed</TL>
                    </span>
                </div>
                <div class="text-center">
                    <TL>This page is crashed. The error has been reported to the moonlight team. Meanwhile you can try reloading the page</TL>
                </div>
            </div>
        </div>
    </div>
}

@code
{
    List<Exception> receivedExceptions = new();

    protected override async Task OnErrorAsync(Exception exception)
    {
        receivedExceptions.Add(exception);

        var user = IdentityService.User;
        var id = user == null ? -1 : user.Id;

        Logger.Error($"[{id}] An unhanded exception occured:");
        Logger.Error(exception);

        await base.OnErrorAsync(exception);

        if (exception is DisplayException displayException)
        {
            Task.Run(async () =>
            {
                await AlertService.Error(
                    SmartTranslateService.Translate("Error"),
                    SmartTranslateService.Translate(displayException.Message)
                    );
            });
            
            Recover();

            await InvokeAsync(StateHasChanged);
        }
    }

    public new void Recover()
    {
        receivedExceptions.Clear();
        base.Recover();
    }
}